// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: business_account.sql

package pgstore

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const closeBusinessAccount = `-- name: CloseBusinessAccount :exec
UPDATE business_account
SET closed_at = now()
`

func (q *Queries) CloseBusinessAccount(ctx context.Context) error {
	_, err := q.db.Exec(ctx, closeBusinessAccount)
	return err
}

const createBusinessAccount = `-- name: CreateBusinessAccount :one
INSERT INTO business_account (id, email, trade_name, age, phone, category)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, revenue, age, trade_name, phone, email, category, balance, created_at, updated_at, closed_at
`

type CreateBusinessAccountParams struct {
	ID        string      `json:"id"`
	Email     pgtype.Text `json:"email"`
	TradeName pgtype.Text `json:"trade_name"`
	Age       pgtype.Int4 `json:"age"`
	Phone     pgtype.Text `json:"phone"`
	Category  pgtype.Text `json:"category"`
}

func (q *Queries) CreateBusinessAccount(ctx context.Context, arg CreateBusinessAccountParams) (BusinessAccount, error) {
	row := q.db.QueryRow(ctx, createBusinessAccount,
		arg.ID,
		arg.Email,
		arg.TradeName,
		arg.Age,
		arg.Phone,
		arg.Category,
	)
	var i BusinessAccount
	err := row.Scan(
		&i.ID,
		&i.Revenue,
		&i.Age,
		&i.TradeName,
		&i.Phone,
		&i.Email,
		&i.Category,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ClosedAt,
	)
	return i, err
}

const decrementBalanceBusinessAccount = `-- name: DecrementBalanceBusinessAccount :exec
UPDATE business_account
SET balance = balance - $2::numeric
WHERE id = $1
`

type DecrementBalanceBusinessAccountParams struct {
	ID    string         `json:"id"`
	Value pgtype.Numeric `json:"value"`
}

func (q *Queries) DecrementBalanceBusinessAccount(ctx context.Context, arg DecrementBalanceBusinessAccountParams) error {
	_, err := q.db.Exec(ctx, decrementBalanceBusinessAccount, arg.ID, arg.Value)
	return err
}

const getBusinessAccount = `-- name: GetBusinessAccount :one
SELECT id, revenue, age, trade_name, phone, email, category, balance, created_at, updated_at, closed_at FROM business_account
WHERE id = $1
`

func (q *Queries) GetBusinessAccount(ctx context.Context, id string) (BusinessAccount, error) {
	row := q.db.QueryRow(ctx, getBusinessAccount, id)
	var i BusinessAccount
	err := row.Scan(
		&i.ID,
		&i.Revenue,
		&i.Age,
		&i.TradeName,
		&i.Phone,
		&i.Email,
		&i.Category,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ClosedAt,
	)
	return i, err
}

const incrementBalanceBusinessAccount = `-- name: IncrementBalanceBusinessAccount :exec
UPDATE business_account
SET balance = balance + $2::numeric
WHERE id = $1
`

type IncrementBalanceBusinessAccountParams struct {
	ID    string         `json:"id"`
	Value pgtype.Numeric `json:"value"`
}

func (q *Queries) IncrementBalanceBusinessAccount(ctx context.Context, arg IncrementBalanceBusinessAccountParams) error {
	_, err := q.db.Exec(ctx, incrementBalanceBusinessAccount, arg.ID, arg.Value)
	return err
}

const reopenBusinessAccount = `-- name: ReopenBusinessAccount :one
UPDATE business_account
SET closed_at = NULL
RETURNING id, revenue, age, trade_name, phone, email, category, balance, created_at, updated_at, closed_at
`

func (q *Queries) ReopenBusinessAccount(ctx context.Context) (BusinessAccount, error) {
	row := q.db.QueryRow(ctx, reopenBusinessAccount)
	var i BusinessAccount
	err := row.Scan(
		&i.ID,
		&i.Revenue,
		&i.Age,
		&i.TradeName,
		&i.Phone,
		&i.Email,
		&i.Category,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ClosedAt,
	)
	return i, err
}

const updateBusinessAccount = `-- name: UpdateBusinessAccount :one
UPDATE business_account
SET email = $2,
    trade_name = $3,
    age = $4,
    phone = $5,
    category = $6,
    updated_at = now()
WHERE id = $1
RETURNING id, revenue, age, trade_name, phone, email, category, balance, created_at, updated_at, closed_at
`

type UpdateBusinessAccountParams struct {
	ID        string      `json:"id"`
	Email     pgtype.Text `json:"email"`
	TradeName pgtype.Text `json:"trade_name"`
	Age       pgtype.Int4 `json:"age"`
	Phone     pgtype.Text `json:"phone"`
	Category  pgtype.Text `json:"category"`
}

func (q *Queries) UpdateBusinessAccount(ctx context.Context, arg UpdateBusinessAccountParams) (BusinessAccount, error) {
	row := q.db.QueryRow(ctx, updateBusinessAccount,
		arg.ID,
		arg.Email,
		arg.TradeName,
		arg.Age,
		arg.Phone,
		arg.Category,
	)
	var i BusinessAccount
	err := row.Scan(
		&i.ID,
		&i.Revenue,
		&i.Age,
		&i.TradeName,
		&i.Phone,
		&i.Email,
		&i.Category,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ClosedAt,
	)
	return i, err
}

// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: personal_account.sql

package pgstore

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const closePersonalAccount = `-- name: ClosePersonalAccount :exec
UPDATE personal_account
SET closed_at = now()
`

func (q *Queries) ClosePersonalAccount(ctx context.Context) error {
	_, err := q.db.Exec(ctx, closePersonalAccount)
	return err
}

const createPersonalAccount = `-- name: CreatePersonalAccount :one
INSERT INTO personal_account (id, email, full_name, age, phone, category)
VALUES ($1, $2, $3, $4, $5, $6)
RETURNING id, monthy_income, age, full_name, phone, email, category, balance, created_at, updated_at, closed_at
`

type CreatePersonalAccountParams struct {
	ID       string      `json:"id"`
	Email    string      `json:"email"`
	FullName string      `json:"full_name"`
	Age      int32       `json:"age"`
	Phone    pgtype.Text `json:"phone"`
	Category pgtype.Text `json:"category"`
}

func (q *Queries) CreatePersonalAccount(ctx context.Context, arg CreatePersonalAccountParams) (PersonalAccount, error) {
	row := q.db.QueryRow(ctx, createPersonalAccount,
		arg.ID,
		arg.Email,
		arg.FullName,
		arg.Age,
		arg.Phone,
		arg.Category,
	)
	var i PersonalAccount
	err := row.Scan(
		&i.ID,
		&i.MonthyIncome,
		&i.Age,
		&i.FullName,
		&i.Phone,
		&i.Email,
		&i.Category,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ClosedAt,
	)
	return i, err
}

const decrementBalancePersonalAccount = `-- name: DecrementBalancePersonalAccount :exec
UPDATE personal_account
SET balance = balance - $2::numeric
WHERE id = $1
`

type DecrementBalancePersonalAccountParams struct {
	ID    string         `json:"id"`
	Value pgtype.Numeric `json:"value"`
}

func (q *Queries) DecrementBalancePersonalAccount(ctx context.Context, arg DecrementBalancePersonalAccountParams) error {
	_, err := q.db.Exec(ctx, decrementBalancePersonalAccount, arg.ID, arg.Value)
	return err
}

const getPersonalAccount = `-- name: GetPersonalAccount :one
SELECT id, monthy_income, age, full_name, phone, email, category, balance, created_at, updated_at, closed_at FROM personal_account
WHERE id = $1
`

func (q *Queries) GetPersonalAccount(ctx context.Context, id string) (PersonalAccount, error) {
	row := q.db.QueryRow(ctx, getPersonalAccount, id)
	var i PersonalAccount
	err := row.Scan(
		&i.ID,
		&i.MonthyIncome,
		&i.Age,
		&i.FullName,
		&i.Phone,
		&i.Email,
		&i.Category,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ClosedAt,
	)
	return i, err
}

const incrementBalancePersonalAccount = `-- name: IncrementBalancePersonalAccount :exec
UPDATE personal_account
SET balance = balance + $2::numeric
WHERE id = $1
`

type IncrementBalancePersonalAccountParams struct {
	ID    string         `json:"id"`
	Value pgtype.Numeric `json:"value"`
}

func (q *Queries) IncrementBalancePersonalAccount(ctx context.Context, arg IncrementBalancePersonalAccountParams) error {
	_, err := q.db.Exec(ctx, incrementBalancePersonalAccount, arg.ID, arg.Value)
	return err
}

const reopenPersonalAccount = `-- name: ReopenPersonalAccount :one
UPDATE personal_account
SET closed_at = NULL
RETURNING id, monthy_income, age, full_name, phone, email, category, balance, created_at, updated_at, closed_at
`

func (q *Queries) ReopenPersonalAccount(ctx context.Context) (PersonalAccount, error) {
	row := q.db.QueryRow(ctx, reopenPersonalAccount)
	var i PersonalAccount
	err := row.Scan(
		&i.ID,
		&i.MonthyIncome,
		&i.Age,
		&i.FullName,
		&i.Phone,
		&i.Email,
		&i.Category,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ClosedAt,
	)
	return i, err
}

const updatePersonalAccount = `-- name: UpdatePersonalAccount :one
UPDATE personal_account
SET email = $2,
    full_name = $3,
    age = $4,
    phone = $5,
    category = $6,
    updated_at = now()
WHERE id = $1
RETURNING id, monthy_income, age, full_name, phone, email, category, balance, created_at, updated_at, closed_at
`

type UpdatePersonalAccountParams struct {
	ID       string      `json:"id"`
	Email    string      `json:"email"`
	FullName string      `json:"full_name"`
	Age      int32       `json:"age"`
	Phone    pgtype.Text `json:"phone"`
	Category pgtype.Text `json:"category"`
}

func (q *Queries) UpdatePersonalAccount(ctx context.Context, arg UpdatePersonalAccountParams) (PersonalAccount, error) {
	row := q.db.QueryRow(ctx, updatePersonalAccount,
		arg.ID,
		arg.Email,
		arg.FullName,
		arg.Age,
		arg.Phone,
		arg.Category,
	)
	var i PersonalAccount
	err := row.Scan(
		&i.ID,
		&i.MonthyIncome,
		&i.Age,
		&i.FullName,
		&i.Phone,
		&i.Email,
		&i.Category,
		&i.Balance,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ClosedAt,
	)
	return i, err
}
